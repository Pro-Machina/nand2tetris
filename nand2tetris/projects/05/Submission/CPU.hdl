// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Mux1
    Not(in=instruction[15], out=notBit1);
    Mux16(a=aluOut, b=instruction, sel=notBit1, out=mux1Out);
    
    // A register
    Or(a=notBit1, b=instruction[5], out=aRegLoad);
    ARegister(in=mux1Out, load=aRegLoad, out=aRegOut, out[0..14]=addressM);    
    
    // Mux2
    And(a=instruction[15], b=instruction[12], out=mux2Sel);
    Mux16(a=aRegOut, b=inM, sel=mux2Sel, out=mux2Out);
    
    // D register
    And(a=instruction[15], b=instruction[4], out=dRegLoad);
    DRegister(in=aluOut, load=dRegLoad, out=dRegOut);
    
    // Write to M
    And(a=instruction[15], b=instruction[3], out=writeM);

    // ALU
    ALU(x=dRegOut, y=mux2Out, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, out=outM, zr=zrOut, ng=ngOut);
    
    Not(in=zrOut, out=notZero);
    Not(in=ngOut, out=greatETZero);

    // PC
    //// JGT
    And(a=instruction[15], b=instruction[0], out=jgtC);
    //// JEQ
    And(a=instruction[15], b=instruction[1], out=jeqC);
    //// JLT
    And(a=instruction[15], b=instruction[2], out=jltC);

    //// Condition for jump satisfied when
    ////// JGT
    And(a=greatETZero, b=notZero, out=cond1);
    And(a=cond1, b=jgtC, out=loadPC1);
    ////// JEQ
    And(a=jeqC, b=zrOut, out=loadPC2);
    ////// JLT
    And(a=ngOut, b=jltC, out=loadPC3);

    //// Final Load
    Or(a=loadPC1, b=loadPC2, out=loadPC4);
    Or(a=loadPC4, b=loadPC3, out=loadPC);
    PC(in=aRegOut, load=loadPC, inc=true, reset=reset, out[0..14]=pc);
}