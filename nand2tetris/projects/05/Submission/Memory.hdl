// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15]; // in[16] == outM, "If the current instruction needs to write a value to M, the value is placed in outM."
    OUT out[16];

    // RAM = [0, 011111111111111(15)], SCREEN = [100000000000000(15), 101111111111111(15)], KBD = 110000000000000(15)

    PARTS:
    // First 2 bits decide which chip to load
    DMux4Way(in=load, sel=address[13..14], a=loadRAMfirst, b=loadRAMlast, c=loadSCREEN, d=loadKBD);
    Or(a=loadRAMfirst, b=loadRAMlast, out=loadRAM);

    // Loading the chip
    RAM16K(in=in, load=loadRAM, address=address[0..13], out=outRAM);
    Screen(in=in, load=loadSCREEN, address=address[0..12], out=outSCREEN);
    Keyboard(out=outKBD);

    // Getting the output based on the first 2 bits
    Mux4Way16(a=outRAM, b=outRAM, c=outSCREEN, d=outKBD, sel=address[13..14], out=out);
}